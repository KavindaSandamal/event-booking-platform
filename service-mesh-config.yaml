# Service Mesh and API Gateway Configuration
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: event-booking-vs
spec:
  hosts:
  - event-booking-platform.com
  gateways:
  - event-booking-gateway
  http:
  - match:
    - uri:
        prefix: /api/auth
    route:
    - destination:
        host: auth-service
        port:
          number: 8000
  - match:
    - uri:
        prefix: /api/catalog
    route:
    - destination:
        host: catalog-service
        port:
          number: 8000
  - match:
    - uri:
        prefix: /api/booking
    route:
    - destination:
        host: booking-service
        port:
          number: 8000
  - match:
    - uri:
        prefix: /api/payment
    route:
    - destination:
        host: payment-service
        port:
          number: 8000

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: event-booking-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - event-booking-platform.com

---
# Circuit Breaker Pattern
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: event-booking-circuit-breaker
spec:
  host: auth-service
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
        connectTimeout: 30ms
      http:
        http2MaxRequests: 1000
        maxRequestsPerConnection: 10
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 10

---
# Rate Limiting
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: rate-limit-policy
spec:
  selector:
    matchLabels:
      app: event-booking-platform
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/default/sa/event-booking-sa"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/api/*"]
    when:
    - key: request.headers[x-rate-limit]
      values: ["*"]

---
# API Gateway with Kong
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
data:
  kong.yml: |
    _format_version: "2.1"
    _transform: true
    
    services:
    - name: auth-service
      url: http://auth-service:8000
      routes:
      - name: auth-route
        paths:
        - /api/auth
        strip_path: true
      plugins:
      - name: rate-limiting
        config:
          minute: 100
          hour: 1000
    
    - name: catalog-service
      url: http://catalog-service:8000
      routes:
      - name: catalog-route
        paths:
        - /api/catalog
        strip_path: true
      plugins:
      - name: rate-limiting
        config:
          minute: 200
          hour: 2000
    
    - name: booking-service
      url: http://booking-service:8000
      routes:
      - name: booking-route
        paths:
        - /api/booking
        strip_path: true
      plugins:
      - name: rate-limiting
        config:
          minute: 50
          hour: 500
    
    - name: payment-service
      url: http://payment-service:8000
      routes:
      - name: payment-route
        paths:
        - /api/payment
        strip_path: true
      plugins:
      - name: rate-limiting
        config:
          minute: 30
          hour: 300

---
# Load Balancer with Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
      worker_connections 1024;
    }
    
    http {
      upstream auth_backend {
        least_conn;
        server auth-service:8000 max_fails=3 fail_timeout=30s;
        server auth-service-2:8000 max_fails=3 fail_timeout=30s;
        server auth-service-3:8000 max_fails=3 fail_timeout=30s;
      }
      
      upstream catalog_backend {
        least_conn;
        server catalog-service:8000 max_fails=3 fail_timeout=30s;
        server catalog-service-2:8000 max_fails=3 fail_timeout=30s;
      }
      
      upstream booking_backend {
        least_conn;
        server booking-service:8000 max_fails=3 fail_timeout=30s;
        server booking-service-2:8000 max_fails=3 fail_timeout=30s;
      }
      
      upstream payment_backend {
        least_conn;
        server payment-service:8000 max_fails=3 fail_timeout=30s;
        server payment-service-2:8000 max_fails=3 fail_timeout=30s;
      }
      
      server {
        listen 80;
        
        location /api/auth/ {
          proxy_pass http://auth_backend/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/catalog/ {
          proxy_pass http://catalog_backend/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/booking/ {
          proxy_pass http://booking_backend/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/payment/ {
          proxy_pass http://payment_backend/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    }
